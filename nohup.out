
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.1.3.RELEASE)

2017-03-14 08:30:45.089  INFO 14370 --- [           main] com.tcs.testtool.Application             : Starting Application on gbvixaacbancst1.metis.prd with PID 14370 (/opt/jboss/users/Kuldeep/springAngular2/testingtool-0.0.1.jar started by jboss in /opt/jboss/users/Kuldeep/springAngular2)
2017-03-14 08:30:45.203  INFO 14370 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@17d517a: startup date [Tue Mar 14 08:30:45 GMT 2017]; root of context hierarchy
2017-03-14 08:30:46.020  INFO 14370 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]]
2017-03-14 08:30:46.234  INFO 14370 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'jpaMapppingContext': replacing [Root bean: class [org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension$JpaMetamodelMappingContextFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] with [Root bean: class [org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension$JpaMetamodelMappingContextFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null]
2017-03-14 08:30:47.134  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [class org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$abc8d78f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.165  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'transactionAttributeSource' of type [class org.springframework.transaction.annotation.AnnotationTransactionAttributeSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.214  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'transactionInterceptor' of type [class org.springframework.transaction.interceptor.TransactionInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.225  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.config.internalTransactionAdvisor' of type [class org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.354  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'repositoryRelProvider' of type [class org.springframework.data.rest.core.support.RepositoryRelProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.359  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'defaultRelProvider' of type [class org.springframework.hateoas.core.EvoInflectorRelProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.395  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'annotationRelProvider' of type [class org.springframework.hateoas.core.AnnotationRelProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.404  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean '(inner bean)#5698ce' of type [class org.springframework.plugin.core.support.PluginRegistryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.472  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean '(inner bean)#5698ce' of type [class org.springframework.plugin.core.OrderAwarePluginRegistry] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.478  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean '_relProvider' of type [class org.springframework.hateoas.core.DelegatingRelProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.504  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [class org.springframework.data.web.config.SpringDataJacksonConfiguration$$EnhancerBySpringCGLIB$$84c1063] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.554  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'jacksonGeoModule' of type [class org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.556  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' of type [class org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration$$EnhancerBySpringCGLIB$$4d921e2f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:47.757  INFO 14370 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean '_halObjectMapper' of type [class com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-03-14 08:30:48.309  INFO 14370 --- [           main] .t.TomcatEmbeddedServletContainerFactory : Server initialized with port: 9021
2017-03-14 08:30:48.899  INFO 14370 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3724 ms
2017-03-14 08:30:50.714  INFO 14370 --- [ost-startStop-1] j.LocalContainerEntityManagerFactoryBean : Building JPA container EntityManagerFactory for persistence unit 'default'
2017-03-14 08:30:50.730  INFO 14370 --- [ost-startStop-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2017-03-14 08:30:50.834  INFO 14370 --- [ost-startStop-1] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.5.Final}
2017-03-14 08:30:50.842  INFO 14370 --- [ost-startStop-1] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2017-03-14 08:30:50.843  INFO 14370 --- [ost-startStop-1] org.hibernate.cfg.Environment            : HHH000021: Bytecode provider name : javassist
2017-03-14 08:30:51.181  INFO 14370 --- [ost-startStop-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {4.0.4.Final}
2017-03-14 08:30:51.376  INFO 14370 --- [ost-startStop-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.Oracle10gDialect
2017-03-14 08:30:51.460  INFO 14370 --- [ost-startStop-1] o.h.h.i.ast.ASTQueryTranslatorFactory    : HHH000397: Using ASTQueryTranslatorFactory
2017-03-14 08:30:52.303  INFO 14370 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/]
2017-03-14 08:30:52.307  INFO 14370 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2017-03-14 08:30:52.847  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/x-spring-data-compact+json || text/uri-list],custom=[]}" onto public org.springframework.hateoas.Resources<?> org.springframework.data.rest.webmvc.RepositoryEntityController.getCollectionResourceCompact(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.domain.Pageable,org.springframework.data.domain.Sort,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.data.rest.webmvc.ResourceNotFoundException,org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.848  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}],methods=[POST],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryEntityController.postCollectionResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.PersistentEntityResource<?>,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.848  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.hateoas.Resources<?> org.springframework.data.rest.webmvc.RepositoryEntityController.getCollectionResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.domain.Pageable,org.springframework.data.domain.Sort,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.data.rest.webmvc.ResourceNotFoundException,org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.848  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.Resource<?>> org.springframework.data.rest.webmvc.RepositoryEntityController.getItemResource(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.848  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}],methods=[PUT],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<? extends org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryEntityController.putItemResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.PersistentEntityResource<java.lang.Object>,java.io.Serializable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.849  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}],methods=[PATCH],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryEntityController.patchItemResource(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.data.rest.webmvc.PersistentEntityResource<java.lang.Object>,java.io.Serializable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws org.springframework.web.HttpRequestMethodNotSupportedException,org.springframework.data.rest.webmvc.ResourceNotFoundException
2017-03-14 08:30:52.849  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.data.rest.webmvc.RepositoryEntityController.deleteItemResource(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable) throws org.springframework.data.rest.webmvc.ResourceNotFoundException,org.springframework.web.HttpRequestMethodNotSupportedException
2017-03-14 08:30:52.850  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.data.rest.webmvc.RepositoryLinksResource org.springframework.data.rest.webmvc.RepositoryController.listRepositories()
2017-03-14 08:30:52.851  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}],methods=[PATCH || PUT],params=[],headers=[],consumes=[application/json || application/x-spring-data-compact+json || text/uri-list],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<? extends org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.createPropertyReference(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.http.HttpMethod,org.springframework.hateoas.Resources<java.lang.Object>,java.io.Serializable,java.lang.String) throws java.lang.Exception
2017-03-14 08:30:52.851  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}/{propertyId}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReference(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,java.lang.String,java.lang.String,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws java.lang.Exception
2017-03-14 08:30:52.851  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReference(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,java.lang.String,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws java.lang.Exception
2017-03-14 08:30:52.851  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<? extends org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.deletePropertyReference(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,java.lang.String) throws java.lang.Exception
2017-03-14 08:30:52.852  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/x-spring-data-compact+json || text/uri-list],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.followPropertyReferenceCompact(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,java.lang.String,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler) throws java.lang.Exception
2017-03-14 08:30:52.852  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/{id}/{property}/{propertyId}],methods=[DELETE],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<org.springframework.hateoas.ResourceSupport> org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController.deletePropertyReferenceId(org.springframework.data.rest.webmvc.RootResourceInformation,java.io.Serializable,java.lang.String,java.lang.String) throws java.lang.Exception
2017-03-14 08:30:52.852  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/schema],methods=[GET],params=[],headers=[],consumes=[],produces=[application/schema+json],custom=[]}" onto public org.springframework.http.HttpEntity<org.springframework.data.rest.webmvc.json.JsonSchema> org.springframework.data.rest.webmvc.RepositorySchemaController.schema(org.springframework.data.rest.webmvc.RootResourceInformation)
2017-03-14 08:30:52.853  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/search/{method}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/x-spring-data-compact+json],custom=[]}" onto public org.springframework.hateoas.ResourceSupport org.springframework.data.rest.webmvc.RepositorySearchController.executeSearchCompact(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.web.context.request.WebRequest,java.lang.String,java.lang.String,org.springframework.data.domain.Pageable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler)
2017-03-14 08:30:52.853  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/search],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.hateoas.ResourceSupport org.springframework.data.rest.webmvc.RepositorySearchController.listSearches(org.springframework.data.rest.webmvc.RootResourceInformation)
2017-03-14 08:30:52.853  INFO 14370 --- [           main] o.s.d.r.w.RepositoryRestHandlerMapping   : Mapped "{[/{repository}/search/{search}],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.lang.Object> org.springframework.data.rest.webmvc.RepositorySearchController.executeSearch(org.springframework.data.rest.webmvc.RootResourceInformation,org.springframework.web.context.request.WebRequest,java.lang.String,org.springframework.data.domain.Pageable,org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler)
2017-03-14 08:30:52.951  INFO 14370 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-03-14 08:30:52.994  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/statichtml/{htmlname}],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.tcs.testtool.HomeController.staticHtmlCall(java.lang.String)
2017-03-14 08:30:52.997  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/tasks/archive/{taskIds}],methods=[POST],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.util.List<com.tcs.testtool.Task> com.tcs.testtool.TaskManagerController.archiveAllTasks(int[])
2017-03-14 08:30:52.997  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/tasks/{taskId}/{taskStatus}],methods=[POST],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.util.List<com.tcs.testtool.Task> com.tcs.testtool.TaskManagerController.changeTaskStatus(int,java.lang.String) throws java.text.ParseException
2017-03-14 08:30:52.997  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/tasks/insert/{taskName}/{taskDesc}/{taskPriority}/{taskStatus}],methods=[POST],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.util.List<com.tcs.testtool.Task> com.tcs.testtool.TaskManagerController.addTask(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException
2017-03-14 08:30:52.997  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/tasks],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.util.List<com.tcs.testtool.Task> com.tcs.testtool.TaskManagerController.getAllTasks()
2017-03-14 08:30:52.998  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/fetchHeaderJson/{query}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.lang.String com.tcs.testtool.TestRepoController.getHeaderData(java.lang.String)
2017-03-14 08:30:52.998  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/fetchjsonfromquery/{query}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.lang.String com.tcs.testtool.TestRepoController.getQueryData(java.lang.String)
2017-03-14 08:30:52.999  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/fetchblob/{query}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.lang.String com.tcs.testtool.TestRepoController.getBlobToString(java.lang.String)
2017-03-14 08:30:52.999  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/updateTable/{tableName}/{primaryKey}/{jsonObject}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.lang.String com.tcs.testtool.TestRepoController.postTableData(java.lang.String,java.lang.String,org.json.JSONObject)
2017-03-14 08:30:52.999  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/fetchjsonfromtable/{table}/{from}/{to}/{rownum}],methods=[GET],params=[],headers=[],consumes=[],produces=[application/json],custom=[]}" onto public java.lang.String com.tcs.testtool.TestRepoController.getTableData(java.lang.String,int,int,int)
2017-03-14 08:30:53.000  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest)
2017-03-14 08:30:53.000  INFO 14370 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2017-03-14 08:30:53.017  INFO 14370 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-03-14 08:30:53.018  INFO 14370 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2017-03-14 08:30:53.386  INFO 14370 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2017-03-14 08:30:53.460  INFO 14370 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 9021/http
2017-03-14 08:30:53.462  INFO 14370 --- [           main] com.tcs.testtool.Application             : Started Application in 8.911 seconds (JVM running for 9.38)
2017-03-17 14:17:26.865  INFO 14370 --- [nio-9021-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2017-03-17 14:17:27.043  INFO 14370 --- [nio-9021-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 160 ms
Entering into fetchJSONFromQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_cards)
Entering  into function execQuery(select * from  testdashboard_cards)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_yellow)
Entering  into function execQuery(select count(*) cnt from  testdashboard_yellow)
Entering into fetchJSONFromQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering  into function execQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering into fetchJSONFromQuery(select * from testdashboard_cte where rownum < 9)
Entering  into function execQuery(select * from testdashboard_cte where rownum < 9)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_Red)
Entering  into function execQuery(select count(*) cnt from  testdashboard_Red)
Entering into fetchJSONFromQuery(select cnt processed ,timemi minutes from bancs_usr.sitpsr order by 2)
Entering  into function execQuery(select cnt processed ,timemi minutes from bancs_usr.sitpsr order by 2)
Entering into fetchJSONFromQuery(select sum(cnt) cnt, case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end intfid from bancs_usr.sirep where status = 'REJECTED' group by case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end)
Entering  into function execQuery(select sum(cnt) cnt, case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end intfid from bancs_usr.sirep where status = 'REJECTED' group by case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.caintra2rep order by 1)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.caintra2rep order by 1)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.caintrarep order by 1)
Entering into fetchJSONFromQuery(select sum(cnt) cnt, intfid from bancs_usr.sirep where status = 'PENDING'  group by intfid order by case when intfid in( 'SWIFTSAG' ) then 1 when intfid in( 'SWIFTMICS' ) then 2 when intfid in( 'SWIFTNAM' ) then 3 when intfid in ('TradeProcIn1','TradeProcIn2','TradeProcIn3','TradeProcIn4') then 4 when intfid in ('TradeProcOut1','TradeProcOut2','TradeProcOut3','TradeProcOut4') then 5 when intfid =  'SWIFTSAGOUT' then 6 when intfid =  'SWIFTMICSOUT' then 6 when intfid =  'SWIFTNAMOUT' then 7 else 9 end)
Entering  into function execQuery(select sum(cnt) cnt, intfid from bancs_usr.sirep where status = 'PENDING'  group by intfid order by case when intfid in( 'SWIFTSAG' ) then 1 when intfid in( 'SWIFTMICS' ) then 2 when intfid in( 'SWIFTNAM' ) then 3 when intfid in ('TradeProcIn1','TradeProcIn2','TradeProcIn3','TradeProcIn4') then 4 when intfid in ('TradeProcOut1','TradeProcOut2','TradeProcOut3','TradeProcOut4') then 5 when intfid =  'SWIFTSAGOUT' then 6 when intfid =  'SWIFTMICSOUT' then 6 when intfid =  'SWIFTNAMOUT' then 7 else 9 end)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.caintrarep order by 1)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.intrarep  order by 1)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.intrarep  order by 1)
Entering into fetchJSONFromQuery(SELECT SUM(cnt) as value, intfid as label FROM bancs_usr.sirep WHERE status = 'PROCESSED' AND intfid NOT IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4','TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') GROUP BY intfid ORDER BY CASE WHEN intfid IN( 'SWIFTSAG') THEN 1 WHEN intfid IN( 'SWIFTMICS' ) THEN 2 WHEN intfid IN( 'SWIFTNAM' ) THEN 3 WHEN intfid IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') THEN 4 WHEN intfid IN ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') THEN 5 WHEN intfid = 'SWIFTSAGOUT' THEN 6 WHEN intfid = 'SWIFTMICSOUT' THEN 6 WHEN intfid = 'SWIFTNAMOUT' THEN 7 ELSE 9 END)
Entering  into function execQuery(SELECT SUM(cnt) as value, intfid as label FROM bancs_usr.sirep WHERE status = 'PROCESSED' AND intfid NOT IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4','TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') GROUP BY intfid ORDER BY CASE WHEN intfid IN( 'SWIFTSAG') THEN 1 WHEN intfid IN( 'SWIFTMICS' ) THEN 2 WHEN intfid IN( 'SWIFTNAM' ) THEN 3 WHEN intfid IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') THEN 4 WHEN intfid IN ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') THEN 5 WHEN intfid = 'SWIFTSAGOUT' THEN 6 WHEN intfid = 'SWIFTMICSOUT' THEN 6 WHEN intfid = 'SWIFTNAMOUT' THEN 7 ELSE 9 END)
Entering into fetchJSONFromQuery(select BP_ID Total,as_of_date asofdate from bancs_usr.sbl_incorrect_pos  where to_char(as_of_date,'d' )  not in (6,7) and rownum < 500  order by as_of_date)
Entering  into function execQuery(select BP_ID Total,as_of_date asofdate from bancs_usr.sbl_incorrect_pos  where to_char(as_of_date,'d' )  not in (6,7) and rownum < 500  order by as_of_date)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Object 1 -->{"Header":[{},{"ColumnName":["seqno","hostname","path","programname"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_al)
Entering  into function execQuery(select max(seqno)max from testdashboard_al)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_al)
Entering  into function execQuery(select min(seqno)min from testdashboard_al)
Entering into function getTableData(testdashboard_al,1 , 946 , 0)
Entering into fetchJSONFromTable(testdashboard_al,1,946 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_al' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc)
Entering  into function execQuery( select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc))
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Object 1 -->{"Header":[{},{"ColumnName":["seqno","hostname","path","programname"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_al)
Entering  into function execQuery(select max(seqno)max from testdashboard_al)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_al)
Entering  into function execQuery(select min(seqno)min from testdashboard_al)
Entering into function getTableData(testdashboard_al,1 , 946 , 0)
Entering into fetchJSONFromTable(testdashboard_al,1,946 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_al' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc)
Entering  into function execQuery( select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc))
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Object 1 -->{"Header":[{},{"ColumnName":["seqno","report_gentime","report_path","report_name"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_reports)
Entering  into function execQuery(select max(seqno)max from testdashboard_reports)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_reports)
Entering  into function execQuery(select min(seqno)min from testdashboard_reports)
Entering into function getTableData(testdashboard_reports,1 , 39 , 0)
Entering into fetchJSONFromTable(testdashboard_reports,1,39 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_reports' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc)
Entering  into function execQuery( select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc))
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =31
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =31)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =39
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =39)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =35
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =35)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =28
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =28)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =27
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =27)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =1
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =1)
Entering into fetchJSONFromQuery(select * from testdashboard_cte where rownum < 9)
Entering  into function execQuery(select * from testdashboard_cte where rownum < 9)
Entering into fetchJSONFromQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering  into function execQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_pp where rownum < 9)
Entering  into function execQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_cards)
Entering  into function execQuery(select * from  testdashboard_cards)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select count(*) cnt from  testdashboard_green)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_yellow)
Entering  into function execQuery(select count(*) cnt from  testdashboard_yellow)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_Red)
Entering  into function execQuery(select count(*) cnt from  testdashboard_Red)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Object 1 -->{"Header":[{},{"ColumnName":["seqno","report_gentime","report_path","report_name"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_reports)
Entering  into function execQuery(select max(seqno)max from testdashboard_reports)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_reports)
Entering  into function execQuery(select min(seqno)min from testdashboard_reports)
Entering into function getTableData(testdashboard_reports,1 , 39 , 0)
Entering into fetchJSONFromTable(testdashboard_reports,1,39 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_reports' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc)
Entering  into function execQuery( select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc))
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =35
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =35)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Object 1 -->{"Header":[{},{"ColumnName":["seme_ref","instrn_id","msg_typ","sec_num","sca_ref","psafe_val"]},{"ColumnName":["stlmnt_dt","deag_reag_acnt","pset_val","byr_slr_val","net_stlmnt_amt","reag_deag_val"]},{"ColumnName":["net_stlmnt_crncy","msg_func","rela_ref","amt_or_qty","recv_ref","acnt_at_agnt","txn_pos_typ"]},{"ColumnName":["sub_txn_id","txn_id","ordr_typ","sub_txn_pos_typ","trd_dt","txn_typ","sub_txn_typ"]},{"ColumnName":["deal_price_crncy","deal_price","instrn_stat","byr_slr_acnt","instrn_tm","instrn_dt","cbr_lyridvrsn","cbr_seqno"]},{"ColumnName":["inst_prty","agnt_ordr_stat","reag_deag_acnt","reprocess_ind","prev_id","actl_stlmnt_dt","pool_ref","prt_stlmnt_ind","acrd_intrst_crncy"]}],"GroupId":["[]","[1]","[2]","[3]","[4]","[5]","[6]"]}
Entering into fetchJSONFromQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering  into function execQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering into fetchJSONFromQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering  into function execQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering into function getTableData(sa_instrn_inp_prod,163451533 , 163452533 , 0)
Entering into fetchJSONFromTable(sa_instrn_inp_prod,163451533,163452533 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc)
Entering  into function execQuery( select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc))
Entering into function postTableData(sa_instrn_inp_prod,instrn_id , {"inst_prty":"DAKVDEFFDOM","psafe_val":"AB12345","sca_ref":"90909090","cbr_seqno":43520685,"seme_ref":"NA16091421388738","instrn_dt":"2016-09-14 00:00:00FULLSTOP0","deal_price_crncy":"EUR","sub_txn_id":58344070,"recv_ref":"ABNCNL2A","pset_val":"DAKVDEFF","txn_id":52035991,"pool_ref":"","msg_typ":547,"instrn_id":163452533,"sub_txn_typ":1,"cbr_lyridvrsn":"SWIFTNAM","deag_reag_acnt":"","rela_ref":"A058344070-1","acnt_at_agnt":"71350000","reag_deag_acnt":"","agnt_ordr_stat":"","reag_deag_val":"EMCFNL2A","byr_slr_acnt":"","byr_slr_val":"EMCFNL2A","txn_pos_typ":217,"sub_txn_pos_typ":26,"net_stlmnt_crncy":"EUR","txn_typ":4,"deal_price":"","stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","$$hashKey":"object:2443","trd_dt":"2016-09-12 00:00:00FULLSTOP0","prev_id":"","net_stlmnt_amt":"3629FULLSTOP8","msg_func":1,"actl_stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","reprocess_ind":"","acrd_intrst_crncy":"","prt_stlmnt_ind":"","amt_or_qty":915,"ordr_typ":21,"instrn_tm":93002,"sec_num":"suri sahib","instrn_stat":1})
Entering into updateTableData(sa_instrn_inp_prod,instrn_id,{"inst_prty":"DAKVDEFFDOM","psafe_val":"AB12345","sca_ref":"90909090","cbr_seqno":43520685,"seme_ref":"NA16091421388738","instrn_dt":"2016-09-14 00:00:00FULLSTOP0","deal_price_crncy":"EUR","sub_txn_id":58344070,"recv_ref":"ABNCNL2A","pset_val":"DAKVDEFF","txn_id":52035991,"pool_ref":"","msg_typ":547,"instrn_id":163452533,"sub_txn_typ":1,"cbr_lyridvrsn":"SWIFTNAM","deag_reag_acnt":"","rela_ref":"A058344070-1","acnt_at_agnt":"71350000","reag_deag_acnt":"","agnt_ordr_stat":"","reag_deag_val":"EMCFNL2A","byr_slr_acnt":"","byr_slr_val":"EMCFNL2A","txn_pos_typ":217,"sub_txn_pos_typ":26,"net_stlmnt_crncy":"EUR","txn_typ":4,"deal_price":"","stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","$$hashKey":"object:2443","trd_dt":"2016-09-12 00:00:00FULLSTOP0","prev_id":"","net_stlmnt_amt":"3629FULLSTOP8","msg_func":1,"actl_stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","reprocess_ind":"","acrd_intrst_crncy":"","prt_stlmnt_ind":"","amt_or_qty":915,"ordr_typ":21,"instrn_tm":93002,"sec_num":"suri sahib","instrn_stat":1} )
Entering  into function execQuery(  select column_name,column_datatype from TABLE_REPORTING_DETAILS where table_name ='sa_instrn_inp_prod')
Length Of JSON String --> 42
Table Details --> {MSG_FUNC=varchar, CBR_LYRIDVRSN=varchar, STLMNT_DT=date, REAG_DEAG_VAL=varchar, RELA_REF=varchar, POOL_REF=varchar, AGNT_ORDR_STAT=varchar, PRT_STLMNT_IND=varchar, BYR_SLR_VAL=varchar, CBR_SEQNO=varchar, INSTRN_TM=varchar, TRD_DT=date, INSTRN_STAT=varchar, SEC_NUM=varchar, TXN_POS_TYP=varchar, PSAFE_VAL=varchar, TXN_TYP=varchar, INST_PRTY=varchar, NET_STLMNT_AMT=varchar, ACNT_AT_AGNT=varchar, SCA_REF=varchar, DEAG_REAG_ACNT=varchar, SUB_TXN_POS_TYP=varchar, REAG_DEAG_ACNT=varchar, TXN_ID=varchar, ORDR_TYP=varchar, INSTRN_DT=date, ACTL_STLMNT_DT=date, BYR_SLR_ACNT=varchar, REPROCESS_IND=varchar, RECV_REF=varchar, DEAL_PRICE=varchar, SEME_REF=varchar, PREV_ID=varchar, SUB_TXN_ID=varchar, PSET_VAL=varchar, MSG_TYP=varchar, DEAL_PRICE_CRNCY=varchar, NET_STLMNT_CRNCY=varchar, INSTRN_ID=number, AMT_OR_QTY=varchar, SUB_TXN_TYP=varchar, ACRD_INTRST_CRNCY=varchar}
Values of JSON -->
inst_prty = 'DAKVDEFFDOM'
Datatype --> varchar
Values of JSON -->
psafe_val = 'AB12345'
Datatype --> varchar
Values of JSON -->
sca_ref = '90909090'
Datatype --> varchar
Values of JSON -->
cbr_seqno = '43520685'
Datatype --> varchar
Values of JSON -->
seme_ref = 'NA16091421388738'
Datatype --> varchar
Values of JSON -->
instrn_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
deal_price_crncy = 'EUR'
Datatype --> varchar
Values of JSON -->
sub_txn_id = '58344070'
Datatype --> varchar
Values of JSON -->
recv_ref = 'ABNCNL2A'
Datatype --> varchar
Values of JSON -->
pset_val = 'DAKVDEFF'
Datatype --> varchar
Values of JSON -->
txn_id = '52035991'
Datatype --> varchar
Values of JSON -->
pool_ref = ''
Datatype --> varchar
Values of JSON -->
msg_typ = '547'
Datatype --> varchar
Values of JSON -->
sub_txn_typ = '1'
Datatype --> varchar
Values of JSON -->
cbr_lyridvrsn = 'SWIFTNAM'
Datatype --> varchar
Values of JSON -->
deag_reag_acnt = ''
Datatype --> varchar
Values of JSON -->
rela_ref = 'A058344070-1'
Datatype --> varchar
Values of JSON -->
acnt_at_agnt = '71350000'
Datatype --> varchar
Values of JSON -->
reag_deag_acnt = ''
Datatype --> varchar
Values of JSON -->
agnt_ordr_stat = ''
Datatype --> varchar
Values of JSON -->
reag_deag_val = 'EMCFNL2A'
Datatype --> varchar
Values of JSON -->
byr_slr_acnt = ''
Datatype --> varchar
Values of JSON -->
byr_slr_val = 'EMCFNL2A'
Datatype --> varchar
Values of JSON -->
txn_pos_typ = '217'
Datatype --> varchar
Values of JSON -->
sub_txn_pos_typ = '26'
Datatype --> varchar
Values of JSON -->
net_stlmnt_crncy = 'EUR'
Datatype --> varchar
Values of JSON -->
txn_typ = '4'
Datatype --> varchar
Values of JSON -->
deal_price = ''
Datatype --> varchar
Values of JSON -->
stlmnt_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
trd_dt = '2016-09-12 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-12','yyyy-mm-dd')
Values of JSON -->
prev_id = ''
Datatype --> varchar
Values of JSON -->
net_stlmnt_amt = '3629.8'
Datatype --> varchar
Values of JSON -->
msg_func = '1'
Datatype --> varchar
Values of JSON -->
actl_stlmnt_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
reprocess_ind = ''
Datatype --> varchar
Values of JSON -->
acrd_intrst_crncy = ''
Datatype --> varchar
Values of JSON -->
prt_stlmnt_ind = ''
Datatype --> varchar
Values of JSON -->
amt_or_qty = '915'
Datatype --> varchar
Values of JSON -->
ordr_typ = '21'
Datatype --> varchar
Values of JSON -->
instrn_tm = '93002'
Datatype --> varchar
Values of JSON -->
sec_num = 'suri sahib'
Datatype --> varchar
Values of JSON -->
instrn_stat = '1'
Datatype --> varchar
update sa_instrn_inp_prod set  inst_prty = 'DAKVDEFFDOM' ,psafe_val = 'AB12345' ,sca_ref = '90909090' ,cbr_seqno = '43520685' ,seme_ref = 'NA16091421388738' ,instrn_dt = to_date('2016-09-14','yyyy-mm-dd') ,deal_price_crncy = 'EUR' ,sub_txn_id = '58344070' ,recv_ref = 'ABNCNL2A' ,pset_val = 'DAKVDEFF' ,txn_id = '52035991' ,pool_ref = '' ,msg_typ = '547' ,sub_txn_typ = '1' ,cbr_lyridvrsn = 'SWIFTNAM' ,deag_reag_acnt = '' ,rela_ref = 'A058344070-1' ,acnt_at_agnt = '71350000' ,reag_deag_acnt = '' ,agnt_ordr_stat = '' ,reag_deag_val = 'EMCFNL2A' ,byr_slr_acnt = '' ,byr_slr_val = 'EMCFNL2A' ,txn_pos_typ = '217' ,sub_txn_pos_typ = '26' ,net_stlmnt_crncy = 'EUR' ,txn_typ = '4' ,deal_price = '' ,stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,trd_dt = to_date('2016-09-12','yyyy-mm-dd') ,prev_id = '' ,net_stlmnt_amt = '3629.8' ,msg_func = '1' ,actl_stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,reprocess_ind = '' ,acrd_intrst_crncy = '' ,prt_stlmnt_ind = '' ,amt_or_qty = '915' ,ordr_typ = '21' ,instrn_tm = '93002' ,sec_num = 'suri sahib' ,instrn_stat = '1' where instrn_id = '163452533'
Entering  into function execQuery(update sa_instrn_inp_prod set  inst_prty = 'DAKVDEFFDOM' ,psafe_val = 'AB12345' ,sca_ref = '90909090' ,cbr_seqno = '43520685' ,seme_ref = 'NA16091421388738' ,instrn_dt = to_date('2016-09-14','yyyy-mm-dd') ,deal_price_crncy = 'EUR' ,sub_txn_id = '58344070' ,recv_ref = 'ABNCNL2A' ,pset_val = 'DAKVDEFF' ,txn_id = '52035991' ,pool_ref = '' ,msg_typ = '547' ,sub_txn_typ = '1' ,cbr_lyridvrsn = 'SWIFTNAM' ,deag_reag_acnt = '' ,rela_ref = 'A058344070-1' ,acnt_at_agnt = '71350000' ,reag_deag_acnt = '' ,agnt_ordr_stat = '' ,reag_deag_val = 'EMCFNL2A' ,byr_slr_acnt = '' ,byr_slr_val = 'EMCFNL2A' ,txn_pos_typ = '217' ,sub_txn_pos_typ = '26' ,net_stlmnt_crncy = 'EUR' ,txn_typ = '4' ,deal_price = '' ,stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,trd_dt = to_date('2016-09-12','yyyy-mm-dd') ,prev_id = '' ,net_stlmnt_amt = '3629.8' ,msg_func = '1' ,actl_stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,reprocess_ind = '' ,acrd_intrst_crncy = '' ,prt_stlmnt_ind = '' ,amt_or_qty = '915' ,ordr_typ = '21' ,instrn_tm = '93002' ,sec_num = 'suri sahib' ,instrn_stat = '1' where instrn_id = '163452533')
Entering into function postTableData(sa_instrn_inp_prod,instrn_id , {"inst_prty":"DAKVDEFFDOM","psafe_val":"AB12345","sca_ref":"90909090","cbr_seqno":43520685,"seme_ref":"NA16091421388738","instrn_dt":"2016-09-14 00:00:00FULLSTOP0","deal_price_crncy":"EUR","sub_txn_id":58344070,"recv_ref":"ABNCNL2A","pset_val":"DAKVDEFF","txn_id":52035991,"pool_ref":"","msg_typ":547,"instrn_id":163452533,"sub_txn_typ":1,"cbr_lyridvrsn":"SWIFTNAM","deag_reag_acnt":"","rela_ref":"A058344070-1","acnt_at_agnt":"71350000","reag_deag_acnt":"","agnt_ordr_stat":"","reag_deag_val":"EMCFNL2A","byr_slr_acnt":"","byr_slr_val":"EMCFNL2A","txn_pos_typ":217,"sub_txn_pos_typ":26,"net_stlmnt_crncy":"EUR","txn_typ":4,"deal_price":"","stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","$$hashKey":"object:2443","trd_dt":"2016-09-12 00:00:00FULLSTOP0","prev_id":"","net_stlmnt_amt":"3629FULLSTOP8","msg_func":1,"actl_stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","reprocess_ind":"","acrd_intrst_crncy":"","prt_stlmnt_ind":"","amt_or_qty":915,"ordr_typ":21,"instrn_tm":93002,"sec_num":"suri sahib","instrn_stat":1})
Entering into updateTableData(sa_instrn_inp_prod,instrn_id,{"inst_prty":"DAKVDEFFDOM","psafe_val":"AB12345","sca_ref":"90909090","cbr_seqno":43520685,"seme_ref":"NA16091421388738","instrn_dt":"2016-09-14 00:00:00FULLSTOP0","deal_price_crncy":"EUR","sub_txn_id":58344070,"recv_ref":"ABNCNL2A","pset_val":"DAKVDEFF","txn_id":52035991,"pool_ref":"","msg_typ":547,"instrn_id":163452533,"sub_txn_typ":1,"cbr_lyridvrsn":"SWIFTNAM","deag_reag_acnt":"","rela_ref":"A058344070-1","acnt_at_agnt":"71350000","reag_deag_acnt":"","agnt_ordr_stat":"","reag_deag_val":"EMCFNL2A","byr_slr_acnt":"","byr_slr_val":"EMCFNL2A","txn_pos_typ":217,"sub_txn_pos_typ":26,"net_stlmnt_crncy":"EUR","txn_typ":4,"deal_price":"","stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","$$hashKey":"object:2443","trd_dt":"2016-09-12 00:00:00FULLSTOP0","prev_id":"","net_stlmnt_amt":"3629FULLSTOP8","msg_func":1,"actl_stlmnt_dt":"2016-09-14 00:00:00FULLSTOP0","reprocess_ind":"","acrd_intrst_crncy":"","prt_stlmnt_ind":"","amt_or_qty":915,"ordr_typ":21,"instrn_tm":93002,"sec_num":"suri sahib","instrn_stat":1} )
Entering  into function execQuery(  select column_name,column_datatype from TABLE_REPORTING_DETAILS where table_name ='sa_instrn_inp_prod')
Length Of JSON String --> 42
Table Details --> {MSG_FUNC=varchar, CBR_LYRIDVRSN=varchar, STLMNT_DT=date, REAG_DEAG_VAL=varchar, RELA_REF=varchar, POOL_REF=varchar, AGNT_ORDR_STAT=varchar, PRT_STLMNT_IND=varchar, BYR_SLR_VAL=varchar, CBR_SEQNO=varchar, INSTRN_TM=varchar, TRD_DT=date, INSTRN_STAT=varchar, SEC_NUM=varchar, TXN_POS_TYP=varchar, PSAFE_VAL=varchar, TXN_TYP=varchar, INST_PRTY=varchar, NET_STLMNT_AMT=varchar, ACNT_AT_AGNT=varchar, SCA_REF=varchar, DEAG_REAG_ACNT=varchar, SUB_TXN_POS_TYP=varchar, REAG_DEAG_ACNT=varchar, TXN_ID=varchar, ORDR_TYP=varchar, INSTRN_DT=date, ACTL_STLMNT_DT=date, BYR_SLR_ACNT=varchar, REPROCESS_IND=varchar, RECV_REF=varchar, DEAL_PRICE=varchar, SEME_REF=varchar, PREV_ID=varchar, SUB_TXN_ID=varchar, PSET_VAL=varchar, MSG_TYP=varchar, DEAL_PRICE_CRNCY=varchar, NET_STLMNT_CRNCY=varchar, INSTRN_ID=number, AMT_OR_QTY=varchar, SUB_TXN_TYP=varchar, ACRD_INTRST_CRNCY=varchar}
Values of JSON -->
inst_prty = 'DAKVDEFFDOM'
Datatype --> varchar
Values of JSON -->
psafe_val = 'AB12345'
Datatype --> varchar
Values of JSON -->
sca_ref = '90909090'
Datatype --> varchar
Values of JSON -->
cbr_seqno = '43520685'
Datatype --> varchar
Values of JSON -->
seme_ref = 'NA16091421388738'
Datatype --> varchar
Values of JSON -->
instrn_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
deal_price_crncy = 'EUR'
Datatype --> varchar
Values of JSON -->
sub_txn_id = '58344070'
Datatype --> varchar
Values of JSON -->
recv_ref = 'ABNCNL2A'
Datatype --> varchar
Values of JSON -->
pset_val = 'DAKVDEFF'
Datatype --> varchar
Values of JSON -->
txn_id = '52035991'
Datatype --> varchar
Values of JSON -->
pool_ref = ''
Datatype --> varchar
Values of JSON -->
msg_typ = '547'
Datatype --> varchar
Values of JSON -->
sub_txn_typ = '1'
Datatype --> varchar
Values of JSON -->
cbr_lyridvrsn = 'SWIFTNAM'
Datatype --> varchar
Values of JSON -->
deag_reag_acnt = ''
Datatype --> varchar
Values of JSON -->
rela_ref = 'A058344070-1'
Datatype --> varchar
Values of JSON -->
acnt_at_agnt = '71350000'
Datatype --> varchar
Values of JSON -->
reag_deag_acnt = ''
Datatype --> varchar
Values of JSON -->
agnt_ordr_stat = ''
Datatype --> varchar
Values of JSON -->
reag_deag_val = 'EMCFNL2A'
Datatype --> varchar
Values of JSON -->
byr_slr_acnt = ''
Datatype --> varchar
Values of JSON -->
byr_slr_val = 'EMCFNL2A'
Datatype --> varchar
Values of JSON -->
txn_pos_typ = '217'
Datatype --> varchar
Values of JSON -->
sub_txn_pos_typ = '26'
Datatype --> varchar
Values of JSON -->
net_stlmnt_crncy = 'EUR'
Datatype --> varchar
Values of JSON -->
txn_typ = '4'
Datatype --> varchar
Values of JSON -->
deal_price = ''
Datatype --> varchar
Values of JSON -->
stlmnt_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
trd_dt = '2016-09-12 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-12','yyyy-mm-dd')
Values of JSON -->
prev_id = ''
Datatype --> varchar
Values of JSON -->
net_stlmnt_amt = '3629.8'
Datatype --> varchar
Values of JSON -->
msg_func = '1'
Datatype --> varchar
Values of JSON -->
actl_stlmnt_dt = '2016-09-14 00:00:00.0'
Datatype --> date
datestr --> to_date('2016-09-14','yyyy-mm-dd')
Values of JSON -->
reprocess_ind = ''
Datatype --> varchar
Values of JSON -->
acrd_intrst_crncy = ''
Datatype --> varchar
Values of JSON -->
prt_stlmnt_ind = ''
Datatype --> varchar
Values of JSON -->
amt_or_qty = '915'
Datatype --> varchar
Values of JSON -->
ordr_typ = '21'
Datatype --> varchar
Values of JSON -->
instrn_tm = '93002'
Datatype --> varchar
Values of JSON -->
sec_num = 'suri sahib'
Datatype --> varchar
Values of JSON -->
instrn_stat = '1'
Datatype --> varchar
update sa_instrn_inp_prod set  inst_prty = 'DAKVDEFFDOM' ,psafe_val = 'AB12345' ,sca_ref = '90909090' ,cbr_seqno = '43520685' ,seme_ref = 'NA16091421388738' ,instrn_dt = to_date('2016-09-14','yyyy-mm-dd') ,deal_price_crncy = 'EUR' ,sub_txn_id = '58344070' ,recv_ref = 'ABNCNL2A' ,pset_val = 'DAKVDEFF' ,txn_id = '52035991' ,pool_ref = '' ,msg_typ = '547' ,sub_txn_typ = '1' ,cbr_lyridvrsn = 'SWIFTNAM' ,deag_reag_acnt = '' ,rela_ref = 'A058344070-1' ,acnt_at_agnt = '71350000' ,reag_deag_acnt = '' ,agnt_ordr_stat = '' ,reag_deag_val = 'EMCFNL2A' ,byr_slr_acnt = '' ,byr_slr_val = 'EMCFNL2A' ,txn_pos_typ = '217' ,sub_txn_pos_typ = '26' ,net_stlmnt_crncy = 'EUR' ,txn_typ = '4' ,deal_price = '' ,stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,trd_dt = to_date('2016-09-12','yyyy-mm-dd') ,prev_id = '' ,net_stlmnt_amt = '3629.8' ,msg_func = '1' ,actl_stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,reprocess_ind = '' ,acrd_intrst_crncy = '' ,prt_stlmnt_ind = '' ,amt_or_qty = '915' ,ordr_typ = '21' ,instrn_tm = '93002' ,sec_num = 'suri sahib' ,instrn_stat = '1' where instrn_id = '163452533'
Entering  into function execQuery(update sa_instrn_inp_prod set  inst_prty = 'DAKVDEFFDOM' ,psafe_val = 'AB12345' ,sca_ref = '90909090' ,cbr_seqno = '43520685' ,seme_ref = 'NA16091421388738' ,instrn_dt = to_date('2016-09-14','yyyy-mm-dd') ,deal_price_crncy = 'EUR' ,sub_txn_id = '58344070' ,recv_ref = 'ABNCNL2A' ,pset_val = 'DAKVDEFF' ,txn_id = '52035991' ,pool_ref = '' ,msg_typ = '547' ,sub_txn_typ = '1' ,cbr_lyridvrsn = 'SWIFTNAM' ,deag_reag_acnt = '' ,rela_ref = 'A058344070-1' ,acnt_at_agnt = '71350000' ,reag_deag_acnt = '' ,agnt_ordr_stat = '' ,reag_deag_val = 'EMCFNL2A' ,byr_slr_acnt = '' ,byr_slr_val = 'EMCFNL2A' ,txn_pos_typ = '217' ,sub_txn_pos_typ = '26' ,net_stlmnt_crncy = 'EUR' ,txn_typ = '4' ,deal_price = '' ,stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,trd_dt = to_date('2016-09-12','yyyy-mm-dd') ,prev_id = '' ,net_stlmnt_amt = '3629.8' ,msg_func = '1' ,actl_stlmnt_dt = to_date('2016-09-14','yyyy-mm-dd') ,reprocess_ind = '' ,acrd_intrst_crncy = '' ,prt_stlmnt_ind = '' ,amt_or_qty = '915' ,ordr_typ = '21' ,instrn_tm = '93002' ,sec_num = 'suri sahib' ,instrn_stat = '1' where instrn_id = '163452533')
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Object 1 -->{"Header":[{},{"ColumnName":["seme_ref","instrn_id","msg_typ","sec_num","sca_ref","psafe_val"]},{"ColumnName":["stlmnt_dt","deag_reag_acnt","pset_val","byr_slr_val","net_stlmnt_amt","reag_deag_val"]},{"ColumnName":["net_stlmnt_crncy","msg_func","rela_ref","amt_or_qty","recv_ref","acnt_at_agnt","txn_pos_typ"]},{"ColumnName":["sub_txn_id","txn_id","ordr_typ","sub_txn_pos_typ","trd_dt","txn_typ","sub_txn_typ"]},{"ColumnName":["deal_price_crncy","deal_price","instrn_stat","byr_slr_acnt","instrn_tm","instrn_dt","cbr_lyridvrsn","cbr_seqno"]},{"ColumnName":["inst_prty","agnt_ordr_stat","reag_deag_acnt","reprocess_ind","prev_id","actl_stlmnt_dt","pool_ref","prt_stlmnt_ind","acrd_intrst_crncy"]}],"GroupId":["[]","[1]","[2]","[3]","[4]","[5]","[6]"]}
Entering into fetchJSONFromQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering  into function execQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering into fetchJSONFromQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering  into function execQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering into function getTableData(sa_instrn_inp_prod,163451533 , 163452533 , 0)
Entering into fetchJSONFromTable(sa_instrn_inp_prod,163451533,163452533 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc)
Entering  into function execQuery( select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc))
Entering into function getTableData(sa_instrn_inp_prod,163450533 , 163451532 , 0)
Entering into fetchJSONFromTable(sa_instrn_inp_prod,163450533,163451532 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163450533 and instrn_id <= 163451532 order by instrn_id desc)
Entering  into function execQuery( select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163450533 and instrn_id <= 163451532 order by instrn_id desc))
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'sa_instrn_inp_prod')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'sa_instrn_inp_prod' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='sa_instrn_inp_prod')
Object 1 -->{"Header":[{},{"ColumnName":["seme_ref","instrn_id","msg_typ","sec_num","sca_ref","psafe_val"]},{"ColumnName":["stlmnt_dt","deag_reag_acnt","pset_val","byr_slr_val","net_stlmnt_amt","reag_deag_val"]},{"ColumnName":["net_stlmnt_crncy","msg_func","rela_ref","amt_or_qty","recv_ref","acnt_at_agnt","txn_pos_typ"]},{"ColumnName":["sub_txn_id","txn_id","ordr_typ","sub_txn_pos_typ","trd_dt","txn_typ","sub_txn_typ"]},{"ColumnName":["deal_price_crncy","deal_price","instrn_stat","byr_slr_acnt","instrn_tm","instrn_dt","cbr_lyridvrsn","cbr_seqno"]},{"ColumnName":["inst_prty","agnt_ordr_stat","reag_deag_acnt","reprocess_ind","prev_id","actl_stlmnt_dt","pool_ref","prt_stlmnt_ind","acrd_intrst_crncy"]}],"GroupId":["[]","[1]","[2]","[3]","[4]","[5]","[6]"]}
Entering into fetchJSONFromQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering  into function execQuery(select max(instrn_id)max from sa_instrn_inp_prod)
Entering into fetchJSONFromQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering  into function execQuery(select min(instrn_id)min from sa_instrn_inp_prod)
Entering into function getTableData(sa_instrn_inp_prod,163451533 , 163452533 , 0)
Entering into fetchJSONFromTable(sa_instrn_inp_prod,163451533,163452533 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc)
Entering  into function execQuery( select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163451533 and instrn_id <= 163452533 order by instrn_id desc))
Entering into function getTableData(sa_instrn_inp_prod,163450533 , 163451532 , 0)
Entering into fetchJSONFromTable(sa_instrn_inp_prod,163450533,163451532 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='sa_instrn_inp_prod' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163450533 and instrn_id <= 163451532 order by instrn_id desc)
Entering  into function execQuery( select * from ( select INSTRN_ID instrn_id ,MSG_TYP msg_typ ,SEME_REF seme_ref ,SEC_NUM sec_num ,SCA_REF sca_ref ,PSAFE_VAL psafe_val ,PSET_VAL pset_val ,DEAG_REAG_ACNT deag_reag_acnt ,STLMNT_DT stlmnt_dt ,BYR_SLR_VAL byr_slr_val ,REAG_DEAG_VAL reag_deag_val ,NET_STLMNT_AMT net_stlmnt_amt ,NET_STLMNT_CRNCY net_stlmnt_crncy ,MSG_FUNC msg_func ,RELA_REF rela_ref ,AMT_OR_QTY amt_or_qty ,ACNT_AT_AGNT acnt_at_agnt ,RECV_REF recv_ref ,TXN_POS_TYP txn_pos_typ ,TXN_ID txn_id ,SUB_TXN_ID sub_txn_id ,ORDR_TYP ordr_typ ,SUB_TXN_TYP sub_txn_typ ,TXN_TYP txn_typ ,TRD_DT trd_dt ,SUB_TXN_POS_TYP sub_txn_pos_typ ,CBR_SEQNO cbr_seqno ,CBR_LYRIDVRSN cbr_lyridvrsn ,INSTRN_DT instrn_dt ,INSTRN_TM instrn_tm ,BYR_SLR_ACNT byr_slr_acnt ,INSTRN_STAT instrn_stat ,DEAL_PRICE deal_price ,DEAL_PRICE_CRNCY deal_price_crncy ,ACRD_INTRST_CRNCY acrd_intrst_crncy ,POOL_REF pool_ref ,ACTL_STLMNT_DT actl_stlmnt_dt ,PREV_ID prev_id ,INST_PRTY inst_prty ,AGNT_ORDR_STAT agnt_ordr_stat ,REAG_DEAG_ACNT reag_deag_acnt ,REPROCESS_IND reprocess_ind ,PRT_STLMNT_IND prt_stlmnt_ind from sa_instrn_inp_prod where instrn_id >= 163450533 and instrn_id <= 163451532 order by instrn_id desc))
Entering into fetchJSONFromQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering  into function execQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering into fetchJSONFromQuery(select * from testdashboard_cte where rownum < 9)
Entering  into function execQuery(select * from testdashboard_cte where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_pp where rownum < 9)
Entering  into function execQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select count(*) cnt from  testdashboard_green)
Entering into fetchJSONFromQuery(select * from  testdashboard_cards)
Entering  into function execQuery(select * from  testdashboard_cards)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_yellow)
Entering  into function execQuery(select count(*) cnt from  testdashboard_yellow)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_Red)
Entering  into function execQuery(select count(*) cnt from  testdashboard_Red)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_mws')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_mws')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_mws' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_mws')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_mws')
Object 1 -->{"Header":[{},{"ColumnName":["cntok","market_name","cntnok","processing_time","seqno","status"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_mws)
Entering  into function execQuery(select max(seqno)max from testdashboard_mws)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_mws)
Entering  into function execQuery(select min(seqno)min from testdashboard_mws)
Entering into function getTableData(testdashboard_mws,1 , 25 , 0)
Entering into fetchJSONFromTable(testdashboard_mws,1,25 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_mws' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select MARKETSCENARIOS market_name ,CNTOK cntok ,CNTNOK cntnok ,PROCESSINGTIME processing_time ,STATUS status ,SEQNO seqno from testdashboard_mws where SeqNo >= 1 and SeqNo <= 25 order by SeqNo desc)
Entering  into function execQuery( select * from ( select MARKETSCENARIOS market_name ,CNTOK cntok ,CNTNOK cntnok ,PROCESSINGTIME processing_time ,STATUS status ,SEQNO seqno from testdashboard_mws where SeqNo >= 1 and SeqNo <= 25 order by SeqNo desc))
Entering into fetchJSONFromQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering  into function execQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering into fetchJSONFromQuery(select * from testdashboard_cte where rownum < 9)
Entering  into function execQuery(select * from testdashboard_cte where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_pp where rownum < 9)
Entering  into function execQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_cards)
Entering  into function execQuery(select * from  testdashboard_cards)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select count(*) cnt from  testdashboard_green)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_yellow)
Entering  into function execQuery(select count(*) cnt from  testdashboard_yellow)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_Red)
Entering  into function execQuery(select count(*) cnt from  testdashboard_Red)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_bluecard')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_bluecard')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_bluecard' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_bluecard')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_bluecard')
Object 1 -->{"Header":[{},{"ColumnName":["functionareas","seqno","coveredscenarios"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_bluecard)
Entering  into function execQuery(select max(seqno)max from testdashboard_bluecard)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_bluecard)
Entering  into function execQuery(select min(seqno)min from testdashboard_bluecard)
Entering into function getTableData(testdashboard_bluecard,1 , 90 , 0)
Entering into fetchJSONFromTable(testdashboard_bluecard,1,90 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_bluecard' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select FUNCTIONAREAS functionareas ,COVEREDSCENARIOS coveredscenarios ,SEQNO seqno from testdashboard_bluecard where seqno >= 1 and seqno <= 90 order by seqno desc)
Entering  into function execQuery( select * from ( select FUNCTIONAREAS functionareas ,COVEREDSCENARIOS coveredscenarios ,SEQNO seqno from testdashboard_bluecard where seqno >= 1 and seqno <= 90 order by seqno desc))
Entering into fetchJSONFromQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering  into function execQuery(select marketscenarios,cntok,cntnok,processingtime,status from testdashboard_mws where rownum < 9)
Entering into fetchJSONFromQuery(select * from testdashboard_cte where rownum < 9)
Entering  into function execQuery(select * from testdashboard_cte where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_pp where rownum < 9)
Entering  into function execQuery(select * from  testdashboard_pp where rownum < 9)
Entering into fetchJSONFromQuery(select * from  testdashboard_cards)
Entering  into function execQuery(select * from  testdashboard_cards)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_green)
Entering  into function execQuery(select count(*) cnt from  testdashboard_green)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_yellow)
Entering  into function execQuery(select count(*) cnt from  testdashboard_yellow)
Entering into fetchJSONFromQuery(select count(*) cnt from  testdashboard_Red)
Entering  into function execQuery(select count(*) cnt from  testdashboard_Red)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_reports')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_reports')
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_reports' and show_column = 'Y' order by group_id)
Object 1 -->{"Header":[{},{"ColumnName":["seqno","report_gentime","report_path","report_name"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_reports)
Entering  into function execQuery(select max(seqno)max from testdashboard_reports)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_reports)
Entering  into function execQuery(select min(seqno)min from testdashboard_reports)
Entering into function getTableData(testdashboard_reports,1 , 39 , 0)
Entering into fetchJSONFromTable(testdashboard_reports,1,39 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_reports' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc)
Entering  into function execQuery( select * from ( select seqno seqno ,REPORTGENTIME report_gentime ,REPORTPATH report_path ,REPORTNAME report_name from testdashboard_reports where seqno >= 1 and seqno <= 39 order by seqno desc))
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =38
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =38)
Entering into fetchBlobToString = select reportfile from testdashboard_reports where seqno =30
Entering  into function execQuery(select reportfile from testdashboard_reports where seqno =30)
Entering into fetchJSONFromQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering  into function execQuery(select distinct unique_key as selectionkey from table_reporting_details where table_name = 'testdashboard_al')
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by column_seq)
Entering into fetchHeaderJSONFromQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering  into function execQuery(select group_id,column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' order by group_id)
Entering into fetchJSONFromQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering  into function execQuery(select column_alias header from Table_Reporting_Details where table_name = 'testdashboard_al' and show_column = 'Y' and search_on ='Y' order by column_seq)
Entering into fetchJSONFromQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Entering  into function execQuery(select column_alias header,column_datatype header_datatype from table_reporting_details where table_name ='testdashboard_al')
Object 1 -->{"Header":[{},{"ColumnName":["seqno","hostname","path","programname"]}],"GroupId":["[]","[null]"]}
Entering into fetchJSONFromQuery(select max(seqno)max from testdashboard_al)
Entering  into function execQuery(select max(seqno)max from testdashboard_al)
Entering into fetchJSONFromQuery(select min(seqno)min from testdashboard_al)
Entering  into function execQuery(select min(seqno)min from testdashboard_al)
Entering into function getTableData(testdashboard_al,1 , 946 , 0)
Entering into fetchJSONFromTable(testdashboard_al,1,946 )
Entering  into function execQuery(  select * from Table_Reporting_Details where table_name ='testdashboard_al' and show_column = 'Y' order by column_seq)
exec query =  select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc)
Entering  into function execQuery( select * from ( select programname programname ,hostname hostname ,path path ,seqno seqno from testdashboard_al where seqno >= 1 and seqno <= 946 order by seqno desc))
Entering into fetchJSONFromQuery(select cnt processed ,timemi minutes from bancs_usr.sitpsr order by 2)
Entering  into function execQuery(select cnt processed ,timemi minutes from bancs_usr.sitpsr order by 2)
Entering into fetchJSONFromQuery(select sum(cnt) cnt, case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end intfid from bancs_usr.sirep where status = 'REJECTED' group by case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end)
Entering  into function execQuery(select sum(cnt) cnt, case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end intfid from bancs_usr.sirep where status = 'REJECTED' group by case when intfid in ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') then 'BANCSSECIN' when intfid in ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') then 'BANCSSECOUT' else intfid end)
Entering into fetchJSONFromQuery(select sum(cnt) cnt, intfid from bancs_usr.sirep where status = 'PENDING'  group by intfid order by case when intfid in( 'SWIFTSAG' ) then 1 when intfid in( 'SWIFTMICS' ) then 2 when intfid in( 'SWIFTNAM' ) then 3 when intfid in ('TradeProcIn1','TradeProcIn2','TradeProcIn3','TradeProcIn4') then 4 when intfid in ('TradeProcOut1','TradeProcOut2','TradeProcOut3','TradeProcOut4') then 5 when intfid =  'SWIFTSAGOUT' then 6 when intfid =  'SWIFTMICSOUT' then 6 when intfid =  'SWIFTNAMOUT' then 7 else 9 end)
Entering  into function execQuery(select sum(cnt) cnt, intfid from bancs_usr.sirep where status = 'PENDING'  group by intfid order by case when intfid in( 'SWIFTSAG' ) then 1 when intfid in( 'SWIFTMICS' ) then 2 when intfid in( 'SWIFTNAM' ) then 3 when intfid in ('TradeProcIn1','TradeProcIn2','TradeProcIn3','TradeProcIn4') then 4 when intfid in ('TradeProcOut1','TradeProcOut2','TradeProcOut3','TradeProcOut4') then 5 when intfid =  'SWIFTSAGOUT' then 6 when intfid =  'SWIFTMICSOUT' then 6 when intfid =  'SWIFTNAMOUT' then 7 else 9 end)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.caintrarep order by 1)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.caintrarep order by 1)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.caintra2rep order by 1)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.caintra2rep order by 1)
Entering into fetchJSONFromQuery(select starttime , timemi duration from bancs_usr.intrarep  order by 1)
Entering  into function execQuery(select starttime , timemi duration from bancs_usr.intrarep  order by 1)
Entering into fetchJSONFromQuery(SELECT SUM(cnt) as value, intfid as label FROM bancs_usr.sirep WHERE status = 'PROCESSED' AND intfid NOT IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4','TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') GROUP BY intfid ORDER BY CASE WHEN intfid IN( 'SWIFTSAG') THEN 1 WHEN intfid IN( 'SWIFTMICS' ) THEN 2 WHEN intfid IN( 'SWIFTNAM' ) THEN 3 WHEN intfid IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') THEN 4 WHEN intfid IN ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') THEN 5 WHEN intfid = 'SWIFTSAGOUT' THEN 6 WHEN intfid = 'SWIFTMICSOUT' THEN 6 WHEN intfid = 'SWIFTNAMOUT' THEN 7 ELSE 9 END)
Entering  into function execQuery(SELECT SUM(cnt) as value, intfid as label FROM bancs_usr.sirep WHERE status = 'PROCESSED' AND intfid NOT IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4','TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') GROUP BY intfid ORDER BY CASE WHEN intfid IN( 'SWIFTSAG') THEN 1 WHEN intfid IN( 'SWIFTMICS' ) THEN 2 WHEN intfid IN( 'SWIFTNAM' ) THEN 3 WHEN intfid IN ('TradeProcIn2','TradeProcIn1','TradeProcIn3','TradeProcIn4') THEN 4 WHEN intfid IN ('TradeProcOut4','TradeProcOut2','TradeProcOut3','TradeProcOut1') THEN 5 WHEN intfid = 'SWIFTSAGOUT' THEN 6 WHEN intfid = 'SWIFTMICSOUT' THEN 6 WHEN intfid = 'SWIFTNAMOUT' THEN 7 ELSE 9 END)
Entering into fetchJSONFromQuery(select BP_ID Total,as_of_date asofdate from bancs_usr.sbl_incorrect_pos  where to_char(as_of_date,'d' )  not in (6,7) and rownum < 500  order by as_of_date)
Entering  into function execQuery(select BP_ID Total,as_of_date asofdate from bancs_usr.sbl_incorrect_pos  where to_char(as_of_date,'d' )  not in (6,7) and rownum < 500  order by as_of_date)
